# -*- coding: utf-8 -*-
"""Classfiy_Horses.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RMuVEUJx_i8SdWBua-Ypnx7QtKCG4qQ4
"""

import pandas as pd
horse = pd.read_csv('https://raw.githubusercontent.com/Borgarelli/IA_LinkedIn_Job_Postings/Horse_Survival_Dataset/horse.csv')
horse_encoded = pd.get_dummies(horse, columns=['surgery', 'age', 'rectal_temp', 'pulse', 'respiratory_rate', 'temp_of_extremities',
           'peripheral_pulse', 'mucous_membrane', 'capillary_refill_time', 'pain', 'abdominal_distention',
           'packed_cell_volume', 'total_protein', 'abdomo_appearance', 'abdomo_protein'])

horse_encoded.head()

horse_encoded.drop(['nasogastric_tube','nasogastric_reflux','nasogastric_reflux_ph','rectal_exam_feces','abdomen','peristalsis','lesion_1','lesion_2','lesion_3','surgical_lesion','cp_data'], axis=1, inplace=True)
horse_encoded.head()

horse_encoded = horse_encoded.set_index('hospital_number')
horse_encoded.head()

# Todos os atributos menos as colunas de classe codificadas
X = horse_encoded.drop(['outcome'], axis=1)

# Colunas de classe codificadas
y = horse_encoded['outcome']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=1, stratify = y)

# Treina com 80%
from sklearn.neural_network import MLPClassifier

# Instancia um classificador tipo rede neural com, no máximo, 2000 épocas
model = MLPClassifier(random_state=1, max_iter=2000)

# Treina o modelo
model.fit(X_train, y_train)

from sklearn.metrics import accuracy_score, precision_score, confusion_matrix, ConfusionMatrixDisplay

# Predição
y_pred = model.predict(X_test)

# Acurácia
acc = accuracy_score(y_test, y_pred)
print("Acurácia: {:.2f}".format(acc))
# Precisão
precision = precision_score(y_test, y_pred, average = 'macro',zero_division = 0.0)
print("Precisão: {:.2f}".format(precision))

# Matriz de confusão
print('Matriz de Confusão')
cm = confusion_matrix(y_test, y_pred, labels=y_train.unique())
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=y_train.unique())
disp.plot()